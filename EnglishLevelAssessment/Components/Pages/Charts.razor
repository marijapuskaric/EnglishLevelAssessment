@page "/charts"
@inject ResultService ResultService
@inject LanguageLevelService LanguageLevelService
@rendermode InteractiveServer

<PageTitle>Charts</PageTitle>

<h3>Charts</h3>

<BarChart @ref="barChart" Width="800" Class="mb-4" />
<Button Type="BlazorBootstrap.ButtonType.Button" Color="ButtonColor.Primary" Size="BlazorBootstrap.Size.Small" @onclick="async () => await ShowBarChartOnlineTestMatura()"> Online test / Matura </Button>
<Button Type="BlazorBootstrap.ButtonType.Button" Color="ButtonColor.Primary" Size="BlazorBootstrap.Size.Small" @onclick="async () => await ShowBarChartElektrotehnikaRacunarstvo()"> Računarstvo / Elektrotehnika </Button>
<Button Type="BlazorBootstrap.ButtonType.Button" Color="ButtonColor.Primary" Size="BlazorBootstrap.Size.Small" @onclick="async () => await ShowBarChartPrijediplomskiDiplomski()"> Prijediplomski / Diplomski </Button>

@code 
{
	List<LanguageLevel> languageLevels = new List<LanguageLevel>();
	List<Data.Models.Result> results = new List<Data.Models.Result>();

	private BarChart barChart = default!;
	private BarChartOptions barChartOptions = default!;
	private ChartData chartData = default!;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await CreateBarChartOnlineTestMatura();
			await barChart.InitializeAsync(chartData, barChartOptions);
		}
		await base.OnAfterRenderAsync(firstRender);
	}

	private async Task ShowBarChartElektrotehnikaRacunarstvo()
	{
		List<string> XAxisLabels = new List<string>();
		languageLevels = await LanguageLevelService.GetLanguageLevels();
		if (languageLevels != null)
		{
			foreach (var level in languageLevels)
			{
				if (level.Level != null)
				{
					XAxisLabels.Add(level.Level);
				}
			}
		}

		var datasets = new List<IChartDataset>();
		datasets.Add(await GetChartDatasetStudyProgramme("Računarstvo", 0));
		datasets.Add(await GetChartDatasetStudyProgramme("Elektrotehnika", 1));

		chartData = new ChartData { Labels = XAxisLabels, Datasets = datasets };
		barChartOptions = new BarChartOptions { Responsive = true, Interaction = new Interaction { Mode = InteractionMode.Index } };
		await barChart.UpdateAsync(chartData, barChartOptions);
		StateHasChanged();
	}

	private async Task ShowBarChartPrijediplomskiDiplomski()
	{
		List<string> XAxisLabels = new List<string>();
		languageLevels = await LanguageLevelService.GetLanguageLevels();
		if (languageLevels != null)
		{
			foreach (var level in languageLevels)
			{
				if (level.Level != null)
				{
					XAxisLabels.Add(level.Level);
				}
			}
		}

		var datasets = new List<IChartDataset>();
		datasets.Add(await GetChartDatasetStudyProgramme("Prijediplomski", 0));
		datasets.Add(await GetChartDatasetStudyProgramme("Diplomski", 1));

		chartData = new ChartData { Labels = XAxisLabels, Datasets = datasets };
		barChartOptions = new BarChartOptions { Responsive = true, Interaction = new Interaction { Mode = InteractionMode.Index } };
		await barChart.UpdateAsync(chartData, barChartOptions);
		StateHasChanged();
	}

	private async Task ShowBarChartOnlineTestMatura()
	{
		await CreateBarChartOnlineTestMatura();
		await barChart.UpdateAsync(chartData, barChartOptions);
		StateHasChanged();
	}

	private async Task CreateBarChartOnlineTestMatura()
	{
		List<string> XAxisLabels = new List<string>();
		languageLevels = await LanguageLevelService.GetLanguageLevels();
		if (languageLevels != null)
		{
			foreach (var level in languageLevels)
			{
				if (level.Level != null)
				{
					XAxisLabels.Add(level.Level);
				}
			}
		}

		var datasets = new List<IChartDataset>();
		datasets.Add(await GetChartDatasetOnlineTest());
		datasets.Add(await GetChartDatasetMatura());

		chartData = new ChartData { Labels = XAxisLabels, Datasets = datasets };
		barChartOptions = new BarChartOptions { Responsive = true, Interaction = new Interaction { Mode = InteractionMode.Index } };
	}

	private async Task<BarChartDataset> GetChartDatasetOnlineTest()
	{
		List<double> chartOnlineTestData = new List<double>();
		if (languageLevels != null)
		{
			foreach (var level in languageLevels)
			{
				if (level.Id != null)
				{
					var list = await ResultService.GetOnlineTestResultsByLanguageLevel(level.Id);
					chartOnlineTestData.Add(list.Count());
				}
			}
		}

		var c = ColorBuilder.CategoricalTwelveColors[0].ToColor();
		return new BarChartDataset()
			{
				Label = $"Online test",
				Data = chartOnlineTestData,
				BackgroundColor = new List<string> { c.ToRgbString() },
				BorderColor = new List<string> { c.ToRgbString() },
				BorderWidth = new List<double> { 0 },
			};
	}

	private async Task<BarChartDataset> GetChartDatasetMatura()
	{
		List<double> chartMaturaData = new List<double>();
		if (languageLevels != null)
		{
			foreach (var level in languageLevels)
			{
				if (level.Id != null)
				{
					var list = await ResultService.GetNumberOfMaturaResultsByLanguageLevel(level.Id);
					chartMaturaData.Add(list);
				}
			}
		}

		var c = ColorBuilder.CategoricalTwelveColors[1].ToColor();
		return new BarChartDataset()
			{
				Label = $"Matura",
				Data = chartMaturaData,
				BackgroundColor = new List<string> { c.ToRgbString() },
				BorderColor = new List<string> { c.ToRgbString() },
				BorderWidth = new List<double> { 0 },
			};
	}

	private async Task<BarChartDataset> GetChartDatasetStudyProgramme(string programme, int color)
	{
		List<double> chartProgrammeData = new List<double>();
		if (languageLevels != null)
		{
			foreach (var level in languageLevels)
			{
				if (level.Id != null)
				{
					var list = await ResultService.GetResultsByLanguageLevelAndStudyProgramme(level.Id, programme);
					chartProgrammeData.Add(list.Count);
				}
			}
		}

		var c = ColorBuilder.CategoricalTwelveColors[color].ToColor();
		return new BarChartDataset()
			{
				Label = $"{programme}",
				Data = chartProgrammeData,
				BackgroundColor = new List<string> { c.ToRgbString() },
				BorderColor = new List<string> { c.ToRgbString() },
				BorderWidth = new List<double> { 0 },
			};
	}
}


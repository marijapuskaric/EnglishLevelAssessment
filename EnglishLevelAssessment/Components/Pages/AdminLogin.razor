@page "/login"
@attribute [RequireAntiforgeryToken(required: false)]
@inject UserService UserService
@inject NavigationManager navigationManager
@using System.Security.Cryptography;
@using System.Text;


<PageTitle>Login</PageTitle>

<AuthorizeView Context="authContext">
    <Authorized>
        <h3>Logout</h3>
        <form method="post" onsubmit="@(() => Logout())"  @formname="logoutForm">
            <AntiforgeryToken />
            <div class="d-flex flex-column">
                <label class="m-1">Are you sure you want to log out?</label>
                <div class="m-1">
                    <button type="submit" class="btn btn-primary">Logout </button>
                </div>
            </div>
        </form>
    </Authorized>
    <NotAuthorized>
        <div class="d-flex flex-row justify-content-center ">
            <div class="m-5 p-5 border border-secondary-subtle rounded bg-light">
                <div class="d-flex flex-row justify-content-center">
                    <h3>Login</h3>
                </div>
                <EditForm OnValidSubmit="@(() => Login())" Model="model" FormName="loginForm">
                    <DataAnnotationsValidator />
                    <AntiforgeryToken />
                    <div class="mb-4">
                        <label class="form-label">Username*:</label>
                        <InputText @bind-Value="@model.Username" class="form-control border-info" placeholder="Username" />
                        <ValidationMessage For="() => model.Username" />
                    </div>
                    <div class="mb-4">
                        <label class="form-label">Password*:</label>
                        <InputText @bind-Value="@model.Password" type="password" class="form-control border-info" placeholder="Password" />
                        <ValidationMessage For="() => model.Password" />
                    </div>
                    <div class="d-flex flex-row justify-content-center">
                        <button type="submit" class="btn btn-primary">Login </button>
                    </div>
                </EditForm>
                <p>@message</p>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>
    
@code {
    [CascadingParameter]
    public HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private User model { get; set; } = new User();
    string message = "";

    private async Task Login()
    {
        message = "";
        var userAccount = await UserService.GetUserByUsername(model.Username ?? "");
        if (userAccount == null || !VerifyPassword(model.Password, userAccount.Password))
        {
            message = "Login failed. Incorrect username or password";
            StateHasChanged();
            return;
        }

        var claims = new List<Claim>
                {
                    new Claim(ClaimTypes.Name, userAccount.Username ?? ""),
                    new Claim(ClaimTypes.Role, userAccount.Role ?? "")
                };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(principal);

        navigationManager.NavigateTo("/", true);
    }

    private async Task Logout()
    {
        await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
        navigationManager.NavigateTo("/", true);
    }

    private bool VerifyPassword(string enteredPassword, string hashedPassword)
    {
        var hashedEnteredPassword = HashPassword(enteredPassword);
        return hashedPassword.ToLower() == hashedEnteredPassword;
    }

    private string HashPassword(string password)
    {
        using (SHA256 sha256 = SHA256.Create())
        {
            byte[] hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(password));

            StringBuilder builder = new StringBuilder();
            for (int i = 0; i < hashBytes.Length; i++)
            {
                builder.Append(hashBytes[i].ToString("x2"));
            }
            return builder.ToString();
        }
    }
}


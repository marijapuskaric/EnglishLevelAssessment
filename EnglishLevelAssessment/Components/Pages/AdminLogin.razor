@page "/login"
@attribute [RequireAntiforgeryToken(required: false)]
@inject UserService UserService
@inject NavigationManager navigationManager
@inject IJSRuntime js

<PageTitle>Login</PageTitle>

<AuthorizeView>
    <Authorized>
        <h3>Logout</h3>
        <form method="post" onsubmit="@(() => Logout())"  @formname="logoutForm">
            <AntiforgeryToken />
            <div>
                <label>Are you sure you want to log out?</label>
                <button type="submit" class="btn btn-primary">Logout </button>
            </div>
        </form>
    </Authorized>
    <NotAuthorized>
        <h3>Login</h3>
        <form method="post" onsubmit="@(() => Login())" Model="model" @formname="loginForm">
            <AntiforgeryToken />
            <div class="mb-4">
                <h5 class="form-label">Email*:</h5>
            </div>
            <div class="mb-4">
                <InputText @bind-Value="@model.Email" type="email" class="form-control border-info" placeholder="name@example.com" />
            </div>
            <div class="mb-4">
                <label class="form-label">Password*:</label>
                <InputText @bind-Value="@model.Password" type="password" class="form-control border-info" placeholder="Password" />
            </div>
            <div>
                <button type="submit" class="btn btn-primary">Login </button>
            </div>
        </form>
    </NotAuthorized>
</AuthorizeView>
    
@code {
    [CascadingParameter]
    public HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private User model { get; set; } = new User();

    private async Task Login()
    {
        var userAccount = await UserService.GetUserByEmail(model.Email);
        if (userAccount == null || userAccount.Password != model.Password)
        {
            await js.InvokeVoidAsync("alert", "Invalid email or password");
            return;
        }

        var claims = new List<Claim>
                {
                    new Claim(ClaimTypes.Name, userAccount.Email),
                    new Claim(ClaimTypes.Role, userAccount.Role)
                };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(principal);

        navigationManager.NavigateTo("/", true);
    }

    private async Task Logout()
    {
        await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
        navigationManager.NavigateTo("/", true);
    }
}


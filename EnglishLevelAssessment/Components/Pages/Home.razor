@page "/"
@rendermode InteractiveServer
@inject MaturaService MaturaService
@inject CollegeService CollegeService
@inject QuestionService QuestionService
@inject AnswerService AnswerService
@inject LanguageLevelService LanguageLevelService
@inject ResultService ResultService

<div class="m-1 ms-5 me-5">
    <p class="m-0 mb-1">Ova aplikacija je izrađena kao diplomski rad na Fakultetu elektrotehnike, računarstva i informacijskih tehnologija Osijek.</p>
    <p class="m-0 mb-1">Cilj aplikacije je procjeniti razinu znanja engleskog jezika prema zajedničkom europskom referentnom okviru za jezike (CEFR-u).</p>
    <p class="m-0 mb-1">Prema CEFR-u postoji 6 razina znanja jezika:</p>
    <ul>
        <li>A1 - Begginers</li>
        <li>A2 - Pre-intermediate</li>
        <li>B1 - Intermediate</li>
        <li>B2 - Upper-intermediate</li>
        <li>C1 - Advanced</li>
        <li>C2 - Proficiency</li>
    </ul>
    <p class="m-0 mb-1">Pomoću ove aplikacije će se provesti istraživanje poznavanja engleskog jezika na FERIT-u, te će se dobiveni rezultati usporediti s rezultatima državne mature.</p>
    <p class="m-0 mb-1">
        Kako bi se započeo test za provjeru razine znanja potrebno je odabrati smjer i godinu studiranja te razinu i ocjenu državne mature.
        Uz to prije rješavanja testa potrebno je procijeniti svoju <a href="https://www.coe.int/en/web/common-european-framework-reference-languages/table-1-cefr-3.3-common-reference-levels-global-scale" target="_blank">CEFR</a>
        razinu poznavanja engleskog jezika prema tablici na linku.
        Nakon toga počinje rješavanje testa koji se sastoji od 30 pitanja višestrukoga odabira pri čemu nema mogućnosti vraćanja na prethodno pitanje. 
       Završetkom testa dobiva se procijenjena razina znanja engleskog jezika. <b>Svako neodgovoreno pitanje se smatra netočnim.</b> </p>
</div>

<div class="m-2 ms-5 me-5 mb-5 p-3 border border-secondary-subtle rounded bg-light">
    @if (status == "start")
    {
        <form>
            <div class="mb-3">
                <label class="form-label">Smjer:</label>
                <select class="form-select" aria-label="Default select example" @onchange="OnChange">
                    <option selected disabled hidden>Odaberi smjer</option>
                    @foreach (var i in studyProgrammes)
                    {
                        <option Value="@i.Id">@i.Programme</option>
                    }
                </select>
            </div>
            <div class="mb-3">
                <label class="form-label">Godina:</label>
                <InputSelect @bind-Value=@result.AcademicYearId class="form-select">
                    <option selected disabled hidden>Odaberi godinu</option>
                    @foreach (var i in years)
                    {
                        <option Value="@i.Id">@i.Year</option>
                    }
                </InputSelect>
            </div>
            <div class="mb-3">
                <label class="form-label">Razina mature iz engleskog jezika:</label>
                <InputSelect @bind-Value=@result.MaturaLevelId class="form-select">
                    <option selected disabled hidden>Odaberi razinu mature iz engleskog jezika</option>
                    @foreach (var i in maturaLevels)
                    {
                        <option Value="@i.Id">@i.MaturaLevel1</option>
                    }
                </InputSelect>
            </div>
            <div class="mb-3">
                <label class="form-label">Ocjena mature iz engleskog jezika:</label>
                <InputSelect @bind-Value=@result.MaturaGradeId class="form-select">
                    <option selected disabled hidden>Odaberi ocjenu mature iz engleskog jezika</option>
                    @foreach (var i in maturaGrades)
                    {
                        <option Value="@i.Id">@i.Grade</option>
                    }
                </InputSelect>
            </div>
            <div class="mb-3">
                <label class="form-label">Samostalna procjena <a href="https://www.coe.int/en/web/common-european-framework-reference-languages/table-1-cefr-3.3-common-reference-levels-global-scale" target="_blank">CEFR razine poznavanja engleskog jezika</a>:</label>
                <InputSelect @bind-Value=@result.SelfAssessedLanguageLevelId class="form-select">
                    <option selected disabled hidden>Procijeni svoju razinu poznavanja engleskog jezika</option>
                    @foreach (var i in languageLevels)
                    {
                        <option Value="@i.Id">@i.Level</option>
                    }
                </InputSelect>
            </div>
        </form>
        @if(result.StudyProgrammeId != null && result.AcademicYearId != null && result.MaturaLevelId != null && result.MaturaGradeId != null && result.SelfAssessedLanguageLevelId != null)
        {
            <button  @onclick="OnStart" class="btn btn-primary">Start</button>
        }
        else
        {
            <button @onclick="OnStart" class="btn btn-primary" disabled>Start</button>
        } 
    }

    @if (status == "next")
    {
        <p>@count. @currentQuestion.Text</p>
        <div class="d-flex flex-column p-2">
            <InputRadioGroup @bind-Value=@answer>
                @foreach(var i in answers)
                {
                    <label class="d-flex p-2"><InputRadio Value="@i.Id" class="p-2 " /><span class="p-2">@i.Text</span></label>
                }

            </InputRadioGroup>
        </div>
        if (count == questions.Count())
        {
            <button @onclick="OnFinish" class="btn btn-primary">Finish</button>
        }
        else
        {
            <button @onclick="OnNext" class="btn btn-primary">Next</button>
        }
    
    }


    @if (status == "finish")
    {
        if (languageLevel != null)
        {
            <p class="fw-bold">Vaša razina engleskog jezika je: @languageLevel.Level</p>
            <p>Točni odgovori: @result.NumberOfCorrectAnswers/@result.NumberOfQuestions</p>
            <p>@((MarkupString)languageLevel.Description)</p>
        }
        else
        {
            <p class="fw-bold">Vaše znanje engleskog jezika je ispod A1 razine.</p>
            <p>Točni odgovori: @result.NumberOfCorrectAnswers/@result.NumberOfQuestions</p>
        }

    }
</div>

@code
{
    string status;

    List<StudyProgramme> studyProgrammes = new List<StudyProgramme>();
    List<AcademicYear> years = new List<AcademicYear>();
    List<MaturaLevel> maturaLevels = new List<MaturaLevel>();
    List<MaturaGrade> maturaGrades = new List<MaturaGrade>();
    List<LanguageLevel> languageLevels = new List<LanguageLevel>();

    List<AcademicYear> yearsGraduate = new List<AcademicYear>();

    List<Question> questions = new List<Question>();
    Question currentQuestion = new Question();
    int count = 0;
    List<Answer> answers = new List<Answer>();
    int answer;

    public List<int> userAnswers = new List<int>();

    LanguageLevel languageLevel = new LanguageLevel();
    Data.Models.Result result = new Data.Models.Result();

    public double percentage;


    protected override async Task OnInitializedAsync()
    {
        status = "start";
        studyProgrammes = await CollegeService.GetStudyProgrammes();
        years = await CollegeService.GetAcademicYears();
        maturaLevels = await MaturaService.GetMaturaLevels();
        maturaGrades = await MaturaService.GetMaturaGrades();
        questions = await QuestionService.GetQuestions();
        yearsGraduate = await CollegeService.GetGraduateAcademicYears();
        languageLevels = await LanguageLevelService.GetLanguageLevels();
    }

    async Task OnChange(ChangeEventArgs e)
    {
        int selectedProgrammeId = Convert.ToInt32(e.Value);
        var selectedProgramme = await CollegeService.GetStudyProgrammeById(selectedProgrammeId);

        if (selectedProgramme != null && selectedProgramme.Programme.Contains("Sveučilišni diplomski studij"))
        {
            years = await CollegeService.GetGraduateAcademicYears();
        }
        else
        {
            years = await CollegeService.GetUndergraduateAcademicYears();
        }
        result.StudyProgrammeId = selectedProgrammeId;
    }


    protected async void OnStart()
    {   
        await LoadQuestion();
        status = "next";
        StateHasChanged();
        answer = -1;
    }

    protected async Task LoadQuestion()
    {
        var answersList = await AnswerService.GetAnswersForQuestion(questions.ElementAt(count).Id);
        count++;
        currentQuestion = questions.ElementAt(count - 1);
        answers = answersList;
    }


    protected async void OnNext()
    {
        await LoadQuestion();
        userAnswers.Add(answer);
        StateHasChanged();
        answer = -1;
    }

    protected async void OnFinish()
    {
        userAnswers.Add(answer);
        status = "finish";
        await CalculateResults();
        await ResultService.AddResult(result);
        StateHasChanged();
    }

    protected async Task CalculateResults()
    {
        int correctAnswers = 0;
        foreach (var a in userAnswers)
        {
            if (a >= 0)
            {
                var userAnswer = await AnswerService.GetAnswerById(a);
                if (userAnswer.IsCorrect == true)
                {
                    correctAnswers++;
                }
            }
        }
        result.NumberOfQuestions = count;
        result.NumberOfCorrectAnswers = correctAnswers;
        percentage = (double)(0.5f + ((100f * correctAnswers)/ count));
        if (percentage >= 98)
        {
            languageLevel = await LanguageLevelService.GetLanguageLevelById(6);
        }
        else if (percentage >= 92 && percentage < 98)
        {
            languageLevel = await LanguageLevelService.GetLanguageLevelById(5);
        }
        else if (percentage >= 82 && percentage < 92)
        {
            languageLevel = await LanguageLevelService.GetLanguageLevelById(4);
        }
        else if (percentage >= 72 && percentage < 82)
        {
            languageLevel = await LanguageLevelService.GetLanguageLevelById(3);
        }
        else if (percentage >= 62 && percentage < 72)
        {
            languageLevel = await LanguageLevelService.GetLanguageLevelById(2);
        }
        else if (percentage >= 52 && percentage < 62)
        {
            languageLevel = await LanguageLevelService.GetLanguageLevelById(1);
        }
        else if (percentage >= 0 && percentage < 52)
        {
            languageLevel = null;
        }
        result.LanguageLevelId = languageLevel?.Id ?? null;
    }

}
